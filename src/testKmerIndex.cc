// Copyright (c) 2008-2016, NICTA (National ICT Australia).
// Copyright (c) 2016, Commonwealth Scientific and Industrial Research
// Organisation (CSIRO) ABN 41 687 119 230.
//
// Licensed under the CSIRO Open Source Software License Agreement;
// you may not use this file except in compliance with the License.
// Please see the file LICENSE, included with this distribution.
//
/**  \file
 * Testing Kmer Indexes
 */

#include "KmerIndex.hh"

#include "StringFileFactory.hh"
#include "FastaParser.hh"
#include "LineSource.hh"
#include "GossReadSequenceBases.hh"
#include <set>

using namespace boost;
using namespace std;

#define GOSS_TEST_MODULE TestKmerIndex
#include "testBegin.hh"

static const char* genome =
">gi|6626253|gb|AE000511.1| Helicobacter pylori 26695, complete genome\n"
"TGATTAGTGATTAGTGATTAGTGATTAGTGATTAGTGATTAGTGATTAGTGATTAGTGATTAGTGATTAG\n"
"TGATTAGTGATTAGTGATTAGTGATTAGTGATTAGTGATTAGTGATTAGTGATTAGTGATTAGTGATTAG\n"
"TGATTAGTGATTAGTGATTAGTGATTAGTGATTAGTGATTATAGCATCATTTTTTAAATTTAGGTATAAA\n"
"ACACCCTCAATTCAAGGGTTTTTGAGTGAGCTTTTTGCTCAAAGAATCCAAGATAGCGTTTAAAAATTTA\n"
"GGGGTGTTAGGCTCAGCGTAGAGTTTGCCAAGCTCTATGCATTCATTGATGATGATAGGGTTTTGCGTGG\n"
"GCGTGAAGCCAATTTCATACGCTCCTAAGCGTAAAATCGCCTTTTCCATGCTCCCTAATCGCTTGAAATC\n"
"CCAGTCTTTTAAATGCGGCTCGATGAGGGCGTCAATTTCATTGATTTTTTCTAACACGCCATTAAAAAGG\n"
"CTTAAAGCGAAAGCGAGTTGGTTGTTTTTAATCTTTTTTTCTTCTAACATGCTAGAAGCGATTTTTTTAA\n"
"TTTCTTCATTACCGCTCTCAAACGCATACAACAATTCAACCACAGCCCCCCTGGCTTGAGTTCGTGTCGC\n"
"CATTTTAACCCTTGAGAGTTTGGCACAAGCTCAACAATTCAATGAGGGTGCTCATCGCTTCAAAGCCCTT\n"
"ATTGCCGGCTTTACTGCCCGCTCTTTCAATCGCTTGTTCAATATTGTCCGTGGTCAGCACGCCAAAGCTT\n"
"ACCGGCATGCTGTATTTAAGCATCGCATGGGCAATACCCTTAGTCGCTTCCGCGCTCACATAATCAAAAT\n"
"GCGGAGTCCCCCCTCTAATGATCGCTCCCAAAACGCACACGCCATCGTATTTTTCGCTCTCTAATAATTT\n"
"GTCTAAAATAAAAGGCAATTCATAAGCCCCAGGCACCAGCACGATGTCTAAAAGATCCTCATCGCCCCCA\n"
"TGCCTTTTAAAGCAGTCCATCGCCCCTTCTTGCAATCTGTCTGTGATGATATGATTGAAGCGCGATGTTA\n"
"AAATAGCGACTCTTTCATTCCCTTGTAATTGCAATTTCCCTTCTATGATTTGCATGAAATTCCTTTAAAA\n"
"TAAATTTTGGATTTTTAACATGTCGGTTACTAATTGTTCTAGCTCGTCAGGTTTTAGCATGTTTGCTCCA\n"
"TCGCTTAGGGCGTTTTTAGGATCAACATGCGTTTCAGCAAACAACCCATCAATCCCCACCGCCGCCGCAG\n"
"CTCTCGCTAAAATAGGGGCAAAAGAGCTGTCTCCTGAACTTTTCCCGTTCGCTCCCCCTGGCATTTGCAC\n"
"GCTATGGGTAGCGTCAAAAATCACAGGGGCAAATTCTCGCATGATTTTTAAAGAGCGCATATCCACCACT\n"
"AAATTCCCATACCCAAAGCTGCTCCCCCTTTCACACAGCCACACGCCATTTTTTAACGCTGTTTCATAAG\n"
"TGGGGCTTTGAATGCTTTTATCTCTCGTTTTAAGGGCCTTTAGAACAGAATATTGCATGTCTTTTGGGTT\n"
"CATGAATTGCCCTTTTTTGATATTGACAATAGCGTTAGTCTGGCTCACTTCTACAATCAGATCCGTTTGG\n"
"CGGCACAAAAACGCCGGGATTTGTAAAATATCCGCCACTTTGGCTGCCACGCTTGCTTGATAACTCTCAT\n"
"GCACATCGGTTAAGATTTTATAACCAAATTCCTCTTTGATCGTTTGTAACATTTCTAGGCCTTTTTCTAA\n"
"ACCAGGCCCTCTGTAACTCTCTAAACTCGTGCGGTTCGCCTTATCAAAACTCGCTTTAAAATAAAAATCC\n"
"AACCGCTCGTTGTTGGCTAGGGGTTGCAATTTAGTGGCGATACTTCTTAGATTTTCTAAGCTCTCAATGA\n"
"CGCATGGCCCAGCGATTAAAACGGATTTAGGGGTTTTTGTTTTAGAAGTTTTCATGACTTTTCCTTTGTT\n"
"TAATGGTTTCTCCAATCGGCTCAAAAAAATGGCTTTCAAAATTATAATTATAAATCCTGCCTGTTTCTAT\n"
"GATGTAGTGCCAACCAAAAATTTTTAATTCATTCTTGCTCGCTTTCTCTTGAATGAAATCATAGCTTAAG\n"
"AGGTTGTTGAGTTGCAAGCGCGCATTCAAACGCTCTGTAAGCCATGAACGCTTGGCGAAATGGTTGCTGA\n"
"ATTGCGGGTGGTTTTTTAACTCTTCTTTAACAGGCTCTAAAAATTGTATCCAGTTTGCAATGTAAGGGGT\n"
"TTTAGCTTTGGTGGTTTCATCATGGATTAAATGAACGCTCCCGCAAGCCCCACAATCGCTATGCCCGCAA\n"
"ATGATTAAGTTTTGAACGCCCACATGCGCGATAGCGTATTCAATGCTCGCAATGGTAGAAAGGGACTCTT\n"
"TATAGCTTGTTTTAGGGGGGTTCACATTGCCCATGTTGCAAATCACATACAATTCGCCCGGTTTGGTGCC\n"
"AGTGATTAAATTAGGCACGACTCGTGAATCCACACAAGAAATGAACAAAGTGTGGGGCTTTTGCTTGGTT\n"
"TTTAAGCTCTCATAAAGCTCTTTAAGCTCTTCATATTCATTCTCTTGAAACTCTAACGCTCCTAAAAACG\n"
"CTTTCACTCTTTAACCCTTAAATCTCATTTTGATTAAAATTCGTTTGTTTTTAAAACGCTTATCATAGCT\n"
"AAAATTCTTGCATTTCTTTTTGTTATAATGGCGTTATTTTACACTTTAAAGGGCTTTCATGCAATTATGT\n"
"GTCGCATTGGATTTAGAAAAAAAAGAGGACAATCTTTCTTTATTGCAAGAATTGAAGGGCTTAGATTTAT\n"
">gi|6626253|gb|AE000511.1| Helicobacter pylori 26695, complete genome\n"
"GGGCTAAGGTGGGGCTTAGATCTTTTATAAGAGACGGGGCTGTTTTTTTAGATGAAATCAGAAAGATTGA\n"
"TGAAAATTTTAAGATTTTTTTGGATTTGAAGCTCTATGATATTCCTTATACCATGGCAAATGCCGCACTA\n"
"GAATGCGCGAAATTAGACATTGACATGCTCACCGTGCATTTAAGCAGCGCTAAAAGCGCGCTAACAGCTT\n"
"TAATGCAACGCCTGAACGCTCTTAAAAAACGCCCCTTGATTATGGGCGTGAGCGCTTTAACCAGCTTTAG\n"
"CGAAGAGGAATTTTTGATGGTGTATAACGCCCCTTTAAAAACTCAAGCGATTAAATTGAGTGCTATGGGT\n"
"AAAGAGAGCGGGATTGATGGGGTGGTGTGTTCGGTGTTTGAAAGTTTAGCGATTAAAGAGGCTTTAGGTA\n"
"AGGACTTTTTGACTTTAACCCCTGGCATAAGGCTGGATCAAAATGATAAAGAGGATCAAGAAAGGGTGGC\n"
"GAACGCTAAAGAAGCCAAACAAAATTTAAGCGATTTTATCGTGGTGGGCCGCCCCATTTATCAAGCTAAA\n"
"GAGCCTAGAGAAGTGGTTTTAGAGCTTTTAAAGGATTGTTAAATGCGCGTGTTAGAAACGATTGTTGCTT\n"
"TAAGAGAGTATCGTAAAAGTTTGGAAGAAAGCGTGGGGTTTGTGCCGACTATGGGGGCTTTACACAAAGG\n"
"GCATCAAAGCTTGATAGAAAGGAGTTTGAAAGAAAATTCCCACACGATAGTGAGCGTTTTTGTCAATCCC\n"
"ACGCAATTTGGGGCTAACGAAGATTTTAACGCTTACCCTCGCCCTTTAGAAAAGGATTTGGCTTTATGTG\n"
"AAAAATTAGGCGTTAATGCGGTGTTTGTGCCTAAAATTGGCGAAATGTATCCCTATGAAGCAGAGCAACG\n"
">gi|6626253|gb|AE000511.1| Helicobacter pylori 26695, complete genome\n"
"CCTGAAACTCTATGCTCCTAAATTTTTATCTAGCTCTTTAGAGGGAGCCATGCGTAAAGGGCATTTTGAT\n"
"GGGGTTGTTCAGATCGTGTTAAAAATGTTTCATCTTGTTAATCCCACTAGAGCGTATTTTGGCAAAAAGG\n"
"ACGCCCAACAGCTTTTAATCATTGAGCATTTAGTCAAAGATTTGCTTTTAGACATTGAAATAGCGCCATG\n"
"CGAGATCGTGCGCGATGACGATAATTTGGCTTTAAGCTCTAGGAATGTGTATTTGAATGCCACACAAAGA\n"
"AAACAAGCCCTAGCCATTCCAAAAGCTTTAGAAAAAATCCAGCAGGCCATAGATAAGGGCGAAAAAGCGT\n"
"GCGAAAAACTGAAAAAACTAGGGCTTGAAATTTTAGAAACCTTGGAAGTGGATTATTTGGAATGTTGTAA\n"
"CCACAAGCTAGAGCCTTTAACAATCATAGAGCCAACTAACACGCTCATTTTGGTGGCGGCTCGTGTGGGT\n"
"AAAACCAGGCTTTTAGATAATTTATGGGTGTAGTTTGGAATTTTTGTGGCGACCCTTGAAAGATTTGAAC\n"
"TTCCGTTTCCACCGTGAAAGGGTGGTATCCTTGGCCACTAGATGAAAGGGTCATTTTTAACGATTGACTA\n"
"TTATTTGAAAATAAAGCGTAGAAAATGATTTAAAAAGCACTTGGTGGCGGAGCGGACGGGACTCGAACCC\n";


BOOST_AUTO_TEST_CASE(testTrivial)
{
    StringFileFactory fac;
    fac.addFile("reads.fa", genome);

    static const uint64_t K = 24;

    typedef pair<uint64_t,uint64_t> Pos;
    typedef set<Pos> Poss;
    map<Gossamer::position_type,Poss> mp;
    uint64_t s = 0;
    uint64_t m = 0;
    uint64_t t = 0;

    LineSourcePtr lineSrc
        = PlainLineSource::create(FileThunkIn(fac, "reads.fa"));
    GossReadParserPtr fastaParser = FastaParser::create(lineSrc);

    for (GossReadSequenceBases b(fastaParser); b.valid(); ++b, ++s)
    {
        uint64_t p = 0;
        for (GossRead::Iterator i(*b, K); i.valid(); ++i, ++m)
        {
            Gossamer::position_type x = i.kmer();
            x.normalize(K);
            mp[x].insert(Pos(s, i.offset()));
            uint64_t d = i.offset() - p;
            t += VWord32Codec::encodingLength(d);
            p = i.offset();
        }
        t += VWord32Codec::encodingLength(s);
    }

    {
        KmerIndex::Builder bld(K, "index", fac, t, m);
        for (map<Gossamer::position_type,Poss>::const_iterator i = mp.begin(); i != mp.end(); ++i)
        {
            for (Poss::const_iterator j = i->second.begin(); j != i->second.end(); ++j)
            {
                bld.push_back(i->first, j->first, j->second);
            }
        }
        bld.end();
    }
    KmerIndex idx("index", fac);
    for (map<Gossamer::position_type,Poss>::const_iterator i = mp.begin(); i != mp.end(); ++i)
    {
        KmerIndex::PostingsVector v = idx[i->first];
        if (i->second.size() != 0)
        {
            BOOST_CHECK(v.valid());
        }
        for (Poss::const_iterator j = i->second.begin(); j != i->second.end(); ++j, ++v)
        {
            BOOST_CHECK(v.valid());
            //cerr << "*v = " << (*v).first << '\t' << (*v).second << endl;
            //cerr << "*j = " << (*j).first << '\t' << (*j).second << endl;
            BOOST_CHECK(*v == *j);
        }
    }
}

#include "testEnd.hh"
